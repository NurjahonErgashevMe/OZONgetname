"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
"""
import asyncio
import logging
import os

from aiogram import Bot, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.exceptions import TelegramNetworkError, TelegramBadRequest

from .config import TELEGRAM_CHAT_ID
from .states import ParserState
from .keywords import BOT_MESSAGES, KEYBOARD_BUTTONS
from .utils import (
    check_access, 
    validate_ozon_url, 
    validate_product_links,
    run_parser_sync, 
    run_product_parser_sync,
    cleanup_file
)
from .logging_handler import LogUpdater
from .file_utils import validate_file_for_telegram, compress_file
from src.config import LINKS_OUTPUT_FILE

logger = logging.getLogger(__name__)


class BotHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
    
    def _get_main_menu_keyboard(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é"""
        kb = [
            [KeyboardButton(text=KEYBOARD_BUTTONS['parse'])],
            [KeyboardButton(text=KEYBOARD_BUTTONS['parse_products'])]
        ]
        return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    
    def _get_post_parsing_menu_keyboard(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        kb = [
            [KeyboardButton(text="üîÑ –ù–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥"), KeyboardButton(text="üìä –ü–∞—Ä—Å–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"), KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    
    async def cmd_start(self, message: types.Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not check_access(message.from_user.id):
            await message.answer(BOT_MESSAGES['access_denied'])
            return
        
        keyboard = self._get_main_menu_keyboard()
        await message.answer(BOT_MESSAGES['welcome'], reply_markup=keyboard)
    
    async def cmd_parse(self, message: types.Message, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /parse
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        """
        if not check_access(message.from_user.id):
            await message.answer(BOT_MESSAGES['access_denied'])
            return
        
        await state.set_state(ParserState.waiting_url)
        await message.answer(
            BOT_MESSAGES['parse_request'],
            reply_markup=ReplyKeyboardRemove()
        )
    
    async def cmd_parse_products(self, message: types.Message, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /parse_products
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        """
        if not check_access(message.from_user.id):
            await message.answer(BOT_MESSAGES['access_denied'])
            return
        
        await state.set_state(ParserState.waiting_product_links)
        await message.answer(
            BOT_MESSAGES['parse_products_request'],
            reply_markup=ReplyKeyboardRemove()
        )
    
    async def handle_menu_actions(self, message: types.Message, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –º–µ–Ω—é –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        """
        if not check_access(message.from_user.id):
            await message.answer(BOT_MESSAGES['access_denied'])
            return
        
        text = message.text.lower()
        
        if text == "üîÑ –Ω–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥":
            await self.cmd_parse(message, state)
        elif text == "üìä –ø–∞—Ä—Å–∏—Ç—å —Ç–æ–≤–∞—Ä—ã":
            await self.cmd_parse_products(message, state)
        elif text == "‚ÑπÔ∏è –ø–æ–º–æ—â—å":
            help_text = (
                "ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
                "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                "‚Ä¢ <b>–ü–∞—Ä—Å–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b> - –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Ozon\n"
                "‚Ä¢ <b>–ü–∞—Ä—Å–∏—Ç—å —Ç–æ–≤–∞—Ä—ã</b> - –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º\n\n"
                "üîó <b>–§–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫:</b>\n"
                "‚Ä¢ –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Ozon\n"
                "‚Ä¢ –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤: –ø–æ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–µ –Ω–∞ —Å—Ç—Ä–æ–∫—É\n\n"
                "üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
                "‚Ä¢ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö\n"
                "‚Ä¢ –§–∞–π–ª —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ (–ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π)\n\n"
                "‚ö†Ô∏è <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
                "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50MB\n"
                "‚Ä¢ –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∂–∏–º–∞—é—Ç—Å—è"
            )
            await message.answer(help_text, parse_mode="HTML")
        elif text == "üè† –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            keyboard = self._get_main_menu_keyboard()
            await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)
    
    async def process_url(self, message: types.Message, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å URL
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        """
        if not check_access(message.from_user.id):
            await message.answer(BOT_MESSAGES['access_denied'])
            return
        
        url = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
        is_valid, error_key = validate_ozon_url(url)
        if not is_valid:
            await message.answer(BOT_MESSAGES[error_key])
            return
        
        await state.clear()
        await message.answer(BOT_MESSAGES['parsing_start'])
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤
        log_updater = LogUpdater(self.bot)
        log_task = asyncio.create_task(log_updater.start(message.chat.id))
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_running_loop()
            file_path = await loop.run_in_executor(
                None, 
                run_parser_sync, 
                url, 
                message.from_user.id
            )
            
            if not file_path:
                await message.answer(BOT_MESSAGES['parsing_error'])
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
            await self._send_parsing_results(message, file_path)
            
            # –ò—â–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º links.json
            await self._send_links_file(message, file_path)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
            await self._show_post_parsing_menu(message)
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL: {e}")
            await message.answer(BOT_MESSAGES['parsing_error'])
        finally:
            log_task.cancel()
            try:
                await log_task
            except asyncio.CancelledError:
                pass
    
    async def process_product_links(self, message: types.Message, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        """
        if not check_access(message.from_user.id):
            await message.answer(BOT_MESSAGES['access_denied'])
            return
        
        text = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫
        is_valid, error_key, valid_links = validate_product_links(text)
        if not is_valid:
            await message.answer(BOT_MESSAGES[error_key])
            return
        
        await state.clear()
        await message.answer(
            f"üöÄ –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω...\n"
            f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(valid_links)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫\n"
            f"üìä –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤
        log_updater = LogUpdater(self.bot)
        log_task = asyncio.create_task(log_updater.start(message.chat.id))
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_running_loop()
            file_path = await loop.run_in_executor(
                None, 
                run_product_parser_sync, 
                valid_links, 
                message.from_user.id
            )
            
            if not file_path:
                await message.answer(BOT_MESSAGES['parsing_error'])
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            await self._send_parsing_results(message, file_path)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
            await self._show_post_parsing_menu(message)
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–æ–≤–∞—Ä—ã: {e}")
            await message.answer(BOT_MESSAGES['parsing_error'])
        finally:
            log_task.cancel()
            try:
                await log_task
            except asyncio.CancelledError:
                pass
    
    async def _show_post_parsing_menu(self, message: types.Message):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        """
        keyboard = self._get_post_parsing_menu_keyboard()
        menu_text = (
            "üéâ <b>–ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
            "üí° <b>–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?</b>\n"
            "‚Ä¢ üîÑ <b>–ù–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥</b> - –ø–∞—Ä—Å–∏—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
            "‚Ä¢ üìä <b>–ü–∞—Ä—Å–∏—Ç—å —Ç–æ–≤–∞—Ä—ã</b> - –ø–∞—Ä—Å–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã\n"
            "‚Ä¢ ‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b> - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "‚Ä¢ üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É"
        )
        await message.answer(menu_text, reply_markup=keyboard, parse_mode="HTML")
    
    async def _send_parsing_results(self, message: types.Message, file_path: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        filename = os.path.basename(file_path)
        await message.answer(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!\nüìÑ –§–∞–π–ª: {filename}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
        can_send, reason, size_mb = validate_file_for_telegram(file_path)
        
        if not can_send:
            if "—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π" in reason:
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–∂–∞—Ç—å —Ñ–∞–π–ª
                await message.answer(f"üì¶ –§–∞–π–ª –±–æ–ª—å—à–æ–π ({size_mb:.1f}MB), —Å–∂–∏–º–∞—é...")
                zip_path = compress_file(file_path)
                
                if zip_path:
                    can_send_zip, reason_zip, size_zip_mb = validate_file_for_telegram(zip_path)
                    if can_send_zip:
                        await message.answer(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª ({size_zip_mb:.1f}MB)...")
                        await self._send_document_with_retry(message, zip_path, max_retries=3)
                        asyncio.create_task(cleanup_file(zip_path))
                    else:
                        await message.answer(f"‚ùå –î–∞–∂–µ —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size_zip_mb:.1f}MB)")
                else:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å —Ñ–∞–π–ª")
            else:
                await message.answer(f"‚ùå {reason}")
        else:
            # –§–∞–π–ª –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
            await message.answer(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª ({size_mb:.1f}MB)...")
            await self._send_document_with_retry(message, file_path, max_retries=3)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        asyncio.create_task(cleanup_file(file_path))

    async def _send_links_file(self, message: types.Message, main_file_path: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª LINKS_OUTPUT_FILE –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            main_file_path: –ü—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—É Excel
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            links_file_path = os.path.join(os.getcwd(), LINKS_OUTPUT_FILE)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ LINKS_OUTPUT_FILE
            if os.path.exists(links_file_path):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                can_send, reason, size_mb = validate_file_for_telegram(links_file_path)
                
                if can_send:
                    await message.answer(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ ({size_mb:.1f}MB)...")
                    await self._send_document_with_retry(message, links_file_path, max_retries=3)
                    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ links.json
                    asyncio.create_task(cleanup_file(links_file_path))
                else:
                    await message.answer(f"‚ùå –§–∞–π–ª links.json {reason}")
            else:
                logger.info(f"–§–∞–π–ª {LINKS_OUTPUT_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ links.json: {e}")
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å–æ —Å—Å—ã–ª–∫–∞–º–∏")

    async def _send_document_with_retry(self, message: types.Message, file_path: str, max_retries: int = 3):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        """
        last_error = None
        
        for attempt in range(max_retries):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if not os.path.exists(file_path):
                    raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                
                # –°–æ–∑–¥–∞–µ–º InputFile –∫–∞–∂–¥—ã–π —Ä–∞–∑ –∑–∞–Ω–æ–≤–æ
                input_file = FSInputFile(file_path)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
                file_extension = os.path.splitext(file_path)[1].lower()
                if file_extension == '.txt' or file_extension == '.json':
                    caption = f"üîó –§–∞–π–ª —Å–æ —Å—Å—ã–ª–∫–∞–º–∏\nüìÑ {os.path.basename(file_path)}"
                else:
                    caption = f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞\nüìÑ {os.path.basename(file_path)}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                await message.answer_document(
                    input_file,
                    caption=caption
                )
                
                logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {file_path}")
                return
                
            except (TelegramNetworkError, TelegramBadRequest) as e:
                last_error = e
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                
                if attempt < max_retries - 1:
                    delay = min(2 ** attempt, 10)  # –ú–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∏
                    await message.answer(f"‚è≥ –û—à–∏–±–∫–∞ —Å–µ—Ç–∏, –ø–æ–≤—Ç–æ—Ä—è—é —á–µ—Ä–µ–∑ {delay}—Å...")
                    await asyncio.sleep(delay)
                    
            except Exception as e:
                last_error = e
                logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                
                if attempt < max_retries - 1:
                    await asyncio.sleep(2)
                    
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
        raise last_error or Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
    
    async def handle_unauthorized(self, message: types.Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        await message.answer(BOT_MESSAGES['unauthorized'])


