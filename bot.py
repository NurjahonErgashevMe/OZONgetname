import os
import asyncio
import logging
import re
import queue
import threading
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile
import time
from config import (
    CHROMEDRIVER_PATH, 
    LOG_FILE, 
    WORKER_COUNT, 
    LINKS_OUTPUT_FILE, 
    TOTAL_LINKS,
    RESULTS_DIR,
    get_timestamp,
    get_category_name,
    TELEGRAM_CHAT_ID  # –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ config.py
)
from link_parser import OzonLinkParser
from product_parser import OzonProductParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('telegram_bot')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ParserState(StatesGroup):
    waiting_url = State()

# –û—á–µ—Ä–µ–¥—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ª–æ–≥–æ–≤ –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏
log_queue = queue.Queue()

# –ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å
class QueueLogHandler(logging.Handler):
    def emit(self, record):
        log_entry = self.format(record)
        log_queue.put(log_entry)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
handler = QueueLogHandler()
handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logging.getLogger().addHandler(handler)

# –§–∏–ª—å—Ç—Ä –¥–ª—è –∑–Ω–∞—á–∏–º—ã—Ö –ª–æ–≥–æ–≤
def is_significant_log(log_entry):
    keywords = [
        '–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫:',
        '–ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫:',
        '–í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫:',
        '=== –≠–¢–ê–ü',
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤:',
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤:',
        '–§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:',
        '–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
        '–í–æ—Ä–∫–µ—Ä',
        '–∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É',
        '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        '–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å:',
        '–í—Å–µ –±—Ä–∞—É–∑–µ—Ä—ã –∑–∞–∫—Ä—ã—Ç—ã',
        '–£–°–ü–ï–®–ù–û:',
        '–ó–ê–ö–û–ù–ß–ò–õ–°–Ø',
        '–û–®–ò–ë–ö–ê'
    ]
    return any(keyword in log_entry for keyword in keywords)

# –û—Ç–ø—Ä–∞–≤—â–∏–∫ –ª–æ–≥–æ–≤ –≤ Telegram —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def log_updater(chat_id: int):
    message = None
    log_buffer = []
    last_update = 0
    
    while True:
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ –ª–æ–≥–∏
            new_logs = []
            while not log_queue.empty():
                log_entry = log_queue.get_nowait()
                if is_significant_log(log_entry):
                    new_logs.append(log_entry)
                log_queue.task_done()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ª–æ–≥–∏ –≤ –±—É—Ñ–µ—Ä
            if new_logs:
                log_buffer.extend(new_logs)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –±—É—Ñ–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 15 –∑–∞–ø–∏—Å—è–º–∏
                if len(log_buffer) > 15:
                    log_buffer = log_buffer[-15:]
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                log_text = "\n".join(log_buffer)
                message_text = f"```\n{log_text}\n```"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                current_time = time.time()
                if message and current_time - last_update > 2:
                    try:
                        await bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=message.message_id,
                            text=message_text,
                            parse_mode="Markdown"
                        )
                        last_update = current_time
                    except Exception:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        message = None
                
                if not message:
                    message = await bot.send_message(
                        chat_id, 
                        message_text, 
                        parse_mode="Markdown"
                    )
                    last_update = current_time
            
            await asyncio.sleep(1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            await asyncio.sleep(5)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def check_access(user_id: int):
    return user_id == int(TELEGRAM_CHAT_ID)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
def run_parser(url: str, user_id: int):
    try:
        # –≠—Ç–∞–ø 1: –ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–æ–∫
        logger.info(f"–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Å—ã–ª–æ–∫ –¥–ª—è {url}")
        link_parser = OzonLinkParser(url)
        success, product_urls = link_parser.run()
        
        if not success or not product_urls:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Å—Å—ã–ª–∫–∏")
            return None
        
        # –≠—Ç–∞–ø 2: –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤
        category_name = get_category_name(url)
        logger.info(f"–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ {len(product_urls)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        timestamp = datetime.now().strftime("%d.%m.%Y-%H_%M_%S")
        filename = f"{category_name}_{user_id}_{timestamp}.xlsx"
        excel_path = os.path.join(RESULTS_DIR, filename)
        
        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—É—Ç–∏
        product_parser = OzonProductParser(category_name)
        product_parser.excel_filename = excel_path
        
        if product_parser.run(product_urls):
            logger.info(f"–§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω: {excel_path}")
            return excel_path
        return None
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return None

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if not check_access(message.from_user.id):
        await message.answer("‚õî –í–∞–º –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        return
        
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ozon Parser Bot!\n\n"
        "–Ø –º–æ–≥—É —Å–æ–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö —Å Ozon. "
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /parse –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )
    kb = [[types.KeyboardButton(text="üîÑ –ü–∞—Ä—Å–∏—Ç—å")]]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    
    await message.answer(welcome_text, reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /parse
@dp.message(Command("parse"))
@dp.message(F.text.lower() == "üîÑ –ø–∞—Ä—Å–∏—Ç—å")
async def cmd_parse(message: types.Message, state: FSMContext):
    if not check_access(message.from_user.id):
        await message.answer("‚õî –í–∞–º –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        return
        
    await state.set_state(ParserState.waiting_url)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é Ozon:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "- https://www.ozon.ru/category/sistemnye-bloki-15704/\n"
        "- https://uz.ozon.com/category/kompyuternye-i-ofisnye-kresla-38450/",
        reply_markup=types.ReplyKeyboardRemove()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫
@dp.message(ParserState.waiting_url)
async def process_url(message: types.Message, state: FSMContext):
    if not check_access(message.from_user.id):
        await message.answer("‚õî –í–∞–º –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        return
        
    url = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    if not re.search(r'([a-z]+\.)?ozon\.(ru|kz|com|by|uz)', url, re.IGNORECASE):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é Ozon.")
        return
    
    if "/category/" not in url:
        await message.answer("‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤–µ—Å—Ç–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ Ozon.")
        return
    
    await state.clear()
    msg = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤
    log_task = asyncio.create_task(log_updater(message.chat.id))
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        loop = asyncio.get_running_loop()
        file_path = await loop.run_in_executor(
            None, 
            run_parser, 
            url, 
            message.from_user.id
        )
        
        if not file_path:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await message.answer("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
        await message.answer_document(FSInputFile(file_path))
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(10)
        try:
            os.remove(file_path)
            logger.info(f"–§–∞–π–ª —É–¥–∞–ª–µ–Ω: {file_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            
    finally:
        log_task.cancel()
        try:
            await log_task
        except asyncio.CancelledError:
            pass

# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
@dp.message(F.chat.id != TELEGRAM_CHAT_ID)
async def handle_unauthorized(message: types.Message):
    await message.answer("‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —ç—Ç–æ—Ç –±–æ—Ç")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())